#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

name: 'Suspend the alpha'

on:
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'Id of issue where label was set'
        required: false
      issue_number:
        description: 'Number of issue where label was set'
        required: false
      comment_id:
        description: 'Id of comment in issue where to put workflow run status'
        required: false
      suspend_tag:
        description: 'Set to suspend specified tag'
        required: false

env:

  # <template: werf_envs>
  # Don't forget to update .gitlab-ci-simple.yml if necessary
  WERF_CHANNEL: "ea"
  WERF_ENV: "FE"
  # We use stapel image from own registry due to docker hub pull amount limitation.
  # To re-push stapel image from docker hub use command:
  # `skopeo copy docker://flant/werf-stapel:0.6.1 docker://registry-write.deckhouse.io/flant/werf-stapel:0.6.1`
  WERF_STAPEL_IMAGE_NAME: "${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}/flant/werf-stapel"
  WERF_STAPEL_IMAGE_VERSION: "0.6.1"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name. ${CI_PROJECT_PATH} is not available here in Github.
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"
  BASE_IMAGES_REGISTRY_PATH: "registry.deckhouse.io/base_images/"

  FLANT_REGISTRY_PATH: "${{ secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"
  # </template: werf_envs>
  DEPLOY_CHANNEL: alpha

# Note: no concurrency section for suspend workflows.

jobs:

  # <template: git_info_job>

  git_info:
    name: Get git info
    runs-on: ubuntu-latest
    outputs:
      ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
      ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
      ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
      ci_commit_ref_slug: ${{ steps.git_info.outputs.ci_commit_ref_slug }}
      ci_pipeline_created_at: ${{ steps.git_info.outputs.ci_pipeline_created_at }}
      github_sha: ${{ steps.git_info.outputs.github_sha }}
    # Skip the CI for automation PRs, e.g. changelog
    if: ${{ github.event.pull_request.user.login != 'deckhouse-BOaTswain' }}
    steps:
      - id: git_info
        name: Get tag name and SHA
        uses: actions/github-script@v5.0.0
        with:
          script: |
            const { GITHUB_REF_TYPE, GITHUB_REF_NAME } = process.env

            let githubBranch = '';
            let githubTag = '';
            let githubSHA = '';
            let refName = '';
            let refSlug = '';
            if (context.eventName === "workflow_dispatch" && context.payload.inputs && context.payload.inputs.pull_request_ref) {
              // workflow_dispatch run for pull request should have input 'pull_request_ref'.
              // Note: value in inputs.pull_request_ref is for pull_request_info job.
              refName       = context.payload.inputs.ci_commit_ref_name
              githubBranch  = refName
              githubSHA     = context.payload.inputs.pull_request_sha
              // Extract pull request number from 'refs/pull/<NUM>/merge'
              const prNum   = context.payload.inputs.pull_request_ref.replace('refs/pull/', '').replace('/merge', '').replace('/head', '');
              refSlug       = `pr${prNum}`;
              core.info(`workflow_dispatch event: set git info from inputs. inputs: ${JSON.stringify(context.payload.inputs)}`)
            } else if (context.eventName === "pull_request" || context.eventName === "pull_request_target" ) {
              // For PRs from forks, tag images with `prXXX` to avoid clashes between branches.
              const targetRepo = context.payload.repository.full_name;
              const prRepo = context.payload.pull_request.head.repo.full_name
              const prRef = context.payload.pull_request.head.ref

              refSlug = `pr${context.issue.number}`;
              refName = (prRepo === targetRepo) ? prRef : refSlug;
              githubBranch = refName
              githubSHA = context.payload.pull_request.head.sha
              core.info(`pull request event: set git info from pull_request.head. pr:${prRepo}:${prRef} target:${targetRepo}:${context.ref}`)
            } else {
              // Events: workflow_dispatch without pull_request_ref, schedule, push...
              refName       = GITHUB_REF_NAME
              githubTag     = GITHUB_REF_TYPE == "tag"    ? refName : ""
              githubBranch  = GITHUB_REF_TYPE == "branch" ? refName : ""
              githubSHA     = context.sha
              // refName is 'main' or tag name, so slugification is not necessary.
              refSlug       = refName
              core.info(`${context.eventName} event: set git info from context: ${JSON.stringify({GITHUB_REF_NAME, GITHUB_REF_TYPE, sha: context.sha })}`)
            }

            core.info(`output.ci_commit_ref_slug: '${refSlug}'`)
            core.info(`output.ci_commit_ref_name: '${refName}'`)
            core.info(`output.ci_commit_tag:      '${githubTag}'`)
            core.info(`output.ci_commit_branch:   '${githubBranch}'`)
            core.info(`output.github_sha:         '${githubSHA}'`)

            core.setOutput('ci_commit_ref_slug', refSlug)
            core.setOutput('ci_commit_ref_name', refName)
            core.setOutput(`ci_commit_tag`, githubTag)
            core.setOutput(`ci_commit_branch`, githubBranch)
            core.setOutput('github_sha', githubSHA)

  # </template: git_info_job>

  detect_version:
    name: Detect version
    needs:
      - git_info
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.detect_version.outputs.version}}
    steps:
      - name: Detect version
        id: detect_version
        env:
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          SUSPEND_TAG: ${{ github.event.inputs.suspend_tag }}
        run: |
          if [[ -n ${SUSPEND_TAG} ]] ; then
            echo "::notice title=Suspend version::Workflow started from '${CI_COMMIT_REF_NAME}', but suspend_tag input is set. Use '${SUSPEND_REVISION}' as suspend version."
            echo "::set-output name=version::${SUSPEND_TAG}"
            exit 0
          fi
          if [[ -n ${CI_COMMIT_TAG} ]] ; then
            echo "::notice title=Suspend version::Workflow started from tag '${CI_COMMIT_TAG}'. Use it as suspend version."
            echo "::set-output name=version::${CI_COMMIT_TAG}"
            exit 0
          fi

          echo "::error title=Wrong environment::Seems you try to suspend branch '${CI_COMMIT_REF_NAME}'. Use suspend_tag input or run workflow from tag."
          exit 1


  run_suspend:
    name: Suspend ${{needs.detect_version.outputs.version}} on alpha channel
    environment:
      name: alpha
    needs:
      - git_info
      - detect_version
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_from_event_ref_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.inputs.pull_request_ref || github.event.ref }}
          fetch-depth: 0
      # </template: checkout_from_event_ref_step>
      # <template: update_comment_on_start>
      - name: Update comment on start
        if: ${{ github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'Suspend the alpha';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      # </template: update_comment_on_start>

      # <template: login_dev_registry_step>
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_readonly_registry_step>
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      # <template: login_rw_registry_step>
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>



      - name: Publish release images for CE
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          SUSPEND_VERSION: ${{needs.detect_version.outputs.version}}
          WERF_ENV: CE
        run: |
          # Some precautions.
          shouldExit1=
          if [[ -z ${DEV_REGISTRY_PATH} ]] ; then
            echo "::error title=Missed variable::DEV_REGISTRY_PATH is not set. Define destination registry in secrets."
            shouldExit1=yes
          fi
          if [[ -z ${WERF_ENV} ]] ; then
            echo "::error title=Missed variable::WERF_ENV is not set. Cannot deploy unknown edition, only ce, ee and fe are allowed in inputs."
            shouldExit1=yes
          fi
          if [[ -z ${SUSPEND_VERSION} ]] ; then
            echo "::error title=Missed version::Suspend version not detected. Use suspend_tag input or run workflow from tag."
            shouldExit1=yes
          fi
          if [[ -n ${shouldExit1} ]] ; then
            exit 1
          fi

          echo "Suspend version '${SUSPEND_VERSION}' for CE edition".

          # Variables
          #   1. CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')
          echo "Registry suffix - ${REGISTRY_SUFFIX}"

          #   2. alpha: [EE] -> alpha , beta: [CE] -> beta
          RELEASE_CHANNEL=alpha
          echo "Release channel - ${RELEASE_CHANNEL}"

          #   3. Publish prod images to rw registry
          if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
            DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
          else
            DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${CI_REGISTRY_IMAGE}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
          fi

          echo "{\"version\": \"${SUSPEND_VERSION}\", \"suspend\": true}" > version.json
          cat <<EOF >Dockerfile
          FROM spotify/scratch
          COPY version.json version.json
          EOF
          docker build . -t $DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE

          docker image push ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}
          echo "Delete local 'release version' image ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
          docker image rmi ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE} || true

          echo "Release version image: ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
      - name: Publish release images for EE
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          SUSPEND_VERSION: ${{needs.detect_version.outputs.version}}
          WERF_ENV: EE
        run: |
          # Some precautions.
          shouldExit1=
          if [[ -z ${DEV_REGISTRY_PATH} ]] ; then
            echo "::error title=Missed variable::DEV_REGISTRY_PATH is not set. Define destination registry in secrets."
            shouldExit1=yes
          fi
          if [[ -z ${WERF_ENV} ]] ; then
            echo "::error title=Missed variable::WERF_ENV is not set. Cannot deploy unknown edition, only ce, ee and fe are allowed in inputs."
            shouldExit1=yes
          fi
          if [[ -z ${SUSPEND_VERSION} ]] ; then
            echo "::error title=Missed version::Suspend version not detected. Use suspend_tag input or run workflow from tag."
            shouldExit1=yes
          fi
          if [[ -n ${shouldExit1} ]] ; then
            exit 1
          fi

          echo "Suspend version '${SUSPEND_VERSION}' for EE edition".

          # Variables
          #   1. CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')
          echo "Registry suffix - ${REGISTRY_SUFFIX}"

          #   2. alpha: [EE] -> alpha , beta: [CE] -> beta
          RELEASE_CHANNEL=alpha
          echo "Release channel - ${RELEASE_CHANNEL}"

          #   3. Publish prod images to rw registry
          if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
            DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
          else
            DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${CI_REGISTRY_IMAGE}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
          fi

          echo "{\"version\": \"${SUSPEND_VERSION}\", \"suspend\": true}" > version.json
          cat <<EOF >Dockerfile
          FROM spotify/scratch
          COPY version.json version.json
          EOF
          docker build . -t $DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE

          docker image push ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}
          echo "Delete local 'release version' image ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
          docker image rmi ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE} || true

          echo "Release version image: ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
      - name: Publish release images for FE
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          SUSPEND_VERSION: ${{needs.detect_version.outputs.version}}
          WERF_ENV: FE
        run: |
          # Some precautions.
          shouldExit1=
          if [[ -z ${DEV_REGISTRY_PATH} ]] ; then
            echo "::error title=Missed variable::DEV_REGISTRY_PATH is not set. Define destination registry in secrets."
            shouldExit1=yes
          fi
          if [[ -z ${WERF_ENV} ]] ; then
            echo "::error title=Missed variable::WERF_ENV is not set. Cannot deploy unknown edition, only ce, ee and fe are allowed in inputs."
            shouldExit1=yes
          fi
          if [[ -z ${SUSPEND_VERSION} ]] ; then
            echo "::error title=Missed version::Suspend version not detected. Use suspend_tag input or run workflow from tag."
            shouldExit1=yes
          fi
          if [[ -n ${shouldExit1} ]] ; then
            exit 1
          fi

          echo "Suspend version '${SUSPEND_VERSION}' for FE edition".

          # Variables
          #   1. CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')
          echo "Registry suffix - ${REGISTRY_SUFFIX}"

          #   2. alpha: [EE] -> alpha , beta: [CE] -> beta
          RELEASE_CHANNEL=alpha
          echo "Release channel - ${RELEASE_CHANNEL}"

          #   3. Publish prod images to rw registry
          if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
            DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
          else
            DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${CI_REGISTRY_IMAGE}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
          fi

          echo "{\"version\": \"${SUSPEND_VERSION}\", \"suspend\": true}" > version.json
          cat <<EOF >Dockerfile
          FROM spotify/scratch
          COPY version.json version.json
          EOF
          docker build . -t $DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE

          docker image push ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}
          echo "Delete local 'release version' image ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
          docker image rmi ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE} || true

          echo "Release version image: ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"

      # <template: update_comment_on_finish>
      - name: Update comment on finish
        id: update_comment_on_finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusConfig = 'job,final';
            const name = 'Suspend the alpha';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);
            const stepsContext = JSON.parse(process.env.STEPS_CONTEXT);
            let jobNames = null
            if (process.env.JOB_NAMES) {
              jobNames = JSON.parse(process.env.JOB_NAMES);
            }

            core.info(`needsContext: ${JSON.stringify(needsContext)}`);
            core.info(`jobContext: ${JSON.stringify(jobContext)}`);
            core.info(`stepsContext: ${JSON.stringify(stepsContext)}`);
            core.info(`jobNames: ${JSON.stringify(jobNames)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusConfig, name, needsContext, jobContext, stepsContext, jobNames});
      # </template: update_comment_on_finish>

